# Generated from project/lang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,191,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,27,1,27,5,27,173,8,27,10,27,12,27,176,9,27,1,28,
        1,28,1,28,5,28,181,8,28,10,28,12,28,184,9,28,3,28,186,8,28,1,29,
        1,29,1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,4,1,
        0,97,122,2,0,48,57,97,122,1,0,49,57,1,0,48,57,193,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,65,
        1,0,0,0,5,68,1,0,0,0,7,74,1,0,0,0,9,76,1,0,0,0,11,83,1,0,0,0,13,
        90,1,0,0,0,15,95,1,0,0,0,17,104,1,0,0,0,19,109,1,0,0,0,21,113,1,
        0,0,0,23,116,1,0,0,0,25,118,1,0,0,0,27,120,1,0,0,0,29,122,1,0,0,
        0,31,124,1,0,0,0,33,126,1,0,0,0,35,128,1,0,0,0,37,130,1,0,0,0,39,
        132,1,0,0,0,41,134,1,0,0,0,43,137,1,0,0,0,45,144,1,0,0,0,47,150,
        1,0,0,0,49,160,1,0,0,0,51,163,1,0,0,0,53,166,1,0,0,0,55,170,1,0,
        0,0,57,185,1,0,0,0,59,187,1,0,0,0,61,62,5,108,0,0,62,63,5,101,0,
        0,63,64,5,116,0,0,64,2,1,0,0,0,65,66,5,105,0,0,66,67,5,115,0,0,67,
        4,1,0,0,0,68,69,5,103,0,0,69,70,5,114,0,0,70,71,5,97,0,0,71,72,5,
        112,0,0,72,73,5,104,0,0,73,6,1,0,0,0,74,75,5,61,0,0,75,8,1,0,0,0,
        76,77,5,114,0,0,77,78,5,101,0,0,78,79,5,109,0,0,79,80,5,111,0,0,
        80,81,5,118,0,0,81,82,5,101,0,0,82,10,1,0,0,0,83,84,5,118,0,0,84,
        85,5,101,0,0,85,86,5,114,0,0,86,87,5,116,0,0,87,88,5,101,0,0,88,
        89,5,120,0,0,89,12,1,0,0,0,90,91,5,101,0,0,91,92,5,100,0,0,92,93,
        5,103,0,0,93,94,5,101,0,0,94,14,1,0,0,0,95,96,5,118,0,0,96,97,5,
        101,0,0,97,98,5,114,0,0,98,99,5,116,0,0,99,100,5,105,0,0,100,101,
        5,99,0,0,101,102,5,101,0,0,102,103,5,115,0,0,103,16,1,0,0,0,104,
        105,5,102,0,0,105,106,5,114,0,0,106,107,5,111,0,0,107,108,5,109,
        0,0,108,18,1,0,0,0,109,110,5,97,0,0,110,111,5,100,0,0,111,112,5,
        100,0,0,112,20,1,0,0,0,113,114,5,116,0,0,114,115,5,111,0,0,115,22,
        1,0,0,0,116,117,5,91,0,0,117,24,1,0,0,0,118,119,5,44,0,0,119,26,
        1,0,0,0,120,121,5,93,0,0,121,28,1,0,0,0,122,123,5,40,0,0,123,30,
        1,0,0,0,124,125,5,41,0,0,125,32,1,0,0,0,126,127,5,124,0,0,127,34,
        1,0,0,0,128,129,5,94,0,0,129,36,1,0,0,0,130,131,5,46,0,0,131,38,
        1,0,0,0,132,133,5,38,0,0,133,40,1,0,0,0,134,135,5,46,0,0,135,136,
        5,46,0,0,136,42,1,0,0,0,137,138,5,114,0,0,138,139,5,101,0,0,139,
        140,5,116,0,0,140,141,5,117,0,0,141,142,5,114,0,0,142,143,5,110,
        0,0,143,44,1,0,0,0,144,145,5,119,0,0,145,146,5,104,0,0,146,147,5,
        101,0,0,147,148,5,114,0,0,148,149,5,101,0,0,149,46,1,0,0,0,150,151,
        5,114,0,0,151,152,5,101,0,0,152,153,5,97,0,0,153,154,5,99,0,0,154,
        155,5,104,0,0,155,156,5,97,0,0,156,157,5,98,0,0,157,158,5,108,0,
        0,158,159,5,101,0,0,159,48,1,0,0,0,160,161,5,105,0,0,161,162,5,110,
        0,0,162,50,1,0,0,0,163,164,5,98,0,0,164,165,5,121,0,0,165,52,1,0,
        0,0,166,167,5,102,0,0,167,168,5,111,0,0,168,169,5,114,0,0,169,54,
        1,0,0,0,170,174,7,0,0,0,171,173,7,1,0,0,172,171,1,0,0,0,173,176,
        1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,56,1,0,0,0,176,174,1,
        0,0,0,177,186,5,48,0,0,178,182,7,2,0,0,179,181,7,3,0,0,180,179,1,
        0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,186,1,
        0,0,0,184,182,1,0,0,0,185,177,1,0,0,0,185,178,1,0,0,0,186,58,1,0,
        0,0,187,188,5,34,0,0,188,189,7,0,0,0,189,190,5,34,0,0,190,60,1,0,
        0,0,4,0,174,182,185,0
    ]

class langLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    VAR = 28
    NUM = 29
    CHAR = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'let'", "'is'", "'graph'", "'='", "'remove'", "'vertex'", "'edge'", 
            "'vertices'", "'from'", "'add'", "'to'", "'['", "','", "']'", 
            "'('", "')'", "'|'", "'^'", "'.'", "'&'", "'..'", "'return'", 
            "'where'", "'reachable'", "'in'", "'by'", "'for'" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "NUM", "CHAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "VAR", "NUM", "CHAR" ]

    grammarFileName = "lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


